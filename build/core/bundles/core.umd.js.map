{
  "version": 3,
  "file": "core.umd.js",
  "sources": [
    "~/@ngx-progressbar/core/src/components/ng-progress/ng-progress.component.ts",
    "~/@ngx-progressbar/core/src/components/ng-progress-bar/ng-progress-bar.component.ts",
    "~/@ngx-progressbar/core/src/services/ng-progress.service.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgProgress } from '../../services/ng-progress.service';\n\n@Component({\n  selector: 'ng-progress',\n  template: `\n    <ng-progress-bar\n        [speed]=\"speed\"\n        [ease]=\"ease\"\n        [meteor]=\"meteor\"\n        [spinner]=\"spinner\"\n        [spinnerPosition]=\"spinnerPosition\"\n        [direction]=\"direction\"\n        [color]=\"color\"\n        [thick]=\"thick\"\n    ></ng-progress-bar>\n  `,\n  styles: [`\n    :host {\n      z-index: 999999;\n      pointer-events: none;\n      position: relative; }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgProgressComponent implements OnChanges {\n\n  /** Progress options  */\n  @Input() ease = 'linear';\n  @Input() meteor = true;\n  @Input() spinner = true;\n  @Input() spinnerPosition = 'right';\n  @Input() direction = 'leftToRightIncreased';\n  @Input() color = '#1B95E0';\n  @Input() thick = false;\n  @Input() maximum = 1;\n  @Input() minimum = 0.08;\n  @Input() speed = 200;\n  @Input() trickleSpeed = 300;\n\n  /** Start/Stop Progressbar */\n  @Input('toggle') set toggleProgressbar(toggle: boolean) {\n    toggle ? this.progress.start() : this.progress.done();\n  }\n\n  constructor(public progress: NgProgress) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    const minChng = changes.minimum;\n    const maxChng = changes.maximum;\n    const spdChng = changes.speed;\n    const tklSpdChng = changes.trickleSpeed;\n\n    if (minChng) {\n      if (typeof minChng.currentValue !== 'undefined' && minChng.currentValue !== minChng.previousValue) {\n        if (minChng.currentValue < 0 || minChng.currentValue > 1) {\n          throw new Error('Input [minimum] must be between 0 and 1');\n        } else {\n          this.progress.minimum = minChng.currentValue;\n        }\n      }\n    }\n\n    if (maxChng) {\n      if (typeof maxChng.currentValue !== 'undefined' && maxChng.currentValue !== maxChng.previousValue) {\n        if (maxChng.currentValue < 0 || maxChng.currentValue > 1) {\n          throw new Error('Input [maximum] must be between 0 and 1');\n        } else {\n          this.progress.maximum = maxChng.currentValue;\n        }\n      }\n    }\n\n    if (spdChng) {\n      if (typeof spdChng.currentValue !== 'undefined' && spdChng.currentValue !== spdChng.previousValue) {\n        this.progress.speed = spdChng.currentValue;\n      }\n    }\n\n    if (tklSpdChng) {\n      if (typeof tklSpdChng.currentValue !== 'undefined' && tklSpdChng.currentValue !== tklSpdChng.previousValue) {\n        this.progress.trickleSpeed = tklSpdChng.currentValue;\n      }\n    }\n  }\n}\n",
    "import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { NgProgressState } from '../../models/ng-progress.state';\nimport { NgProgress } from '../../services/ng-progress.service';\n\nimport { of } from 'rxjs/observable/of';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'ng-progress-bar',\n  template: `\n    <div class=\"ng-progress\" *ngIf=\"state$ | async; let state\" [ngClass]=\"state.containerClasses\">\n\n      <div class=\"bar\" [ngStyle]=\"state.progressStyles\">\n\n        <div *ngIf=\"meteor\" class=\"meteor\" [ngStyle]=\"state.meteorStyles\"></div>\n\n      </div>\n\n      <div *ngIf=\"spinner\" class=\"spinner {{state.spinnerClasses}}\">\n\n        <div class=\"spinner-icon\" [ngStyle]=\"state.spinnerStyles\"></div>\n\n      </div> \n    </div>\n  `,\n  styles: [`\n    .ng-progress {\n      z-index: 999999;\n      top: 0;\n      left: 0;\n      width: 100%;\n      position: fixed;\n      zoom: 1;\n      filter: alpha(opacity=0);\n      opacity: 0;\n      -webkit-transition: opacity 200ms linear;\n      transition: opacity 200ms linear; }\n\n    .active {\n      filter: alpha(opacity=100);\n      opacity: 1;\n      -webkit-transition: none;\n      transition: none; }\n\n    .bar {\n      position: absolute;\n      width: 100%;\n      height: 2px; }\n\n    .thick .bar {\n      height: 3px; }\n\n    .meteor {\n      display: block;\n      position: absolute;\n      right: 0;\n      top: -3px;\n      width: 100px;\n      height: 100%;\n      opacity: 1.0; }\n\n    .thick .meteor {\n      top: -4px; }\n\n    .thick .spinner-icon {\n      width: 24px;\n      height: 24px;\n      border: solid 3px transparent; }\n\n    .spinner {\n      display: block;\n      position: fixed;\n      z-index: 1031;\n      top: 15px;\n      right: 15px; }\n      .spinner.spinner-left {\n        left: 15px;\n        right: unset; }\n\n    .spinner-icon {\n      width: 18px;\n      height: 18px;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      border: solid 2px transparent;\n      border-radius: 50%;\n      -webkit-animation: nprogress-spinner 400ms linear infinite;\n              animation: nprogress-spinner 400ms linear infinite; }\n\n    .anti-clockwise .spinner-icon {\n      -webkit-animation-direction: reverse;\n              animation-direction: reverse; }\n\n    @-webkit-keyframes nprogress-spinner {\n      0% {\n        -webkit-transform: rotate(0deg);\n                transform: rotate(0deg); }\n      100% {\n        -webkit-transform: rotate(360deg);\n                transform: rotate(360deg); } }\n\n    @keyframes nprogress-spinner {\n      0% {\n        -webkit-transform: rotate(0deg);\n                transform: rotate(0deg); }\n      100% {\n        -webkit-transform: rotate(360deg);\n                transform: rotate(360deg); } }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgProgressBarComponent implements OnInit {\n\n  @Input() ease: string;\n  @Input() speed: number;\n  @Input() meteor: boolean;\n  @Input() spinner: boolean;\n  @Input() spinnerPosition: string;\n  @Input() direction: string;\n  @Input() thick: string;\n  @Input() color: string;\n\n  state$;\n\n  constructor(public progress: NgProgress) {\n\n  }\n\n  ngOnInit() {\n    this.state$ = this.progress.state$.pipe(\n      switchMap((state: NgProgressState) => {\n        return of({\n          containerClasses: this.containerClasses(state),\n          progressStyles: this.progressBarStyles(state),\n          meteorStyles: this.meteorStyles(),\n          spinnerClasses: this.spinnerClasses(),\n          spinnerStyles: this.spinnerStyles()\n        });\n      })\n    );\n  }\n\n  containerClasses(state: NgProgressState) {\n    return {\n      active: state.active,\n      thick: this.thick\n    };\n  }\n\n  progressBarStyles(state: NgProgressState) {\n\n    const n = (!state.value) ? directionSwitcher[this.direction].bar : this.toPercentage(state.value);\n\n    return {\n      transition: `all ${this.speed}ms ${this.ease}`,\n      background: this.color,\n      mozTransform: translateX(n),\n      oTransform: translateX(n),\n      msTransform: translateX(n),\n      webkitTransform: translateX(n),\n      transform: translateX(n)\n    };\n  }\n\n  /**\n   * Styles for progressbar tail\n   */\n  meteorStyles() {\n    return {\n      boxShadow: `0 0 10px ${this.color}, 0 0 5px ${this.color}`,\n      left: directionSwitcher[this.direction].meteorLeft,\n      transform: directionSwitcher[this.direction].meteorRotate(this.thick),\n    };\n  }\n\n  /**\n   * Convert number to percent\n   * @param {number} n - State value\n   */\n  toPercentage(n: number) {\n    return directionSwitcher[this.direction].toPercentage(n) * 100;\n  }\n\n  /**\n   * Progress direction\n   */\n  spinnerClasses() {\n    const spinnerClass = (this.spinnerPosition === 'left') ? ' spinner-left' : '';\n    return directionSwitcher[this.direction].spinnerClass + spinnerClass;\n  }\n\n  /**\n   * Set spinner color\n   */\n  spinnerStyles() {\n    return {\n      borderTopColor: this.color,\n      borderLeftColor: this.color\n    };\n  }\n\n}\n\nconst translateX = (n) => {\n  return `translate3d(${n}%,0,0)`;\n};\n\nconst directionSwitcher = {\n  leftToRightIncreased: {\n    bar: -100,\n    toPercentage: n => -1 + n,\n    spinnerClass: 'clockwise',\n    meteorRotate: thick => `rotate(${thick ? 4 : 3}deg)`,\n    meteorLeft: 'unset'\n  },\n  leftToRightReduced: {\n    bar: 0,\n    toPercentage: n => -n,\n    spinnerClass: 'anti-clockwise',\n    meteorRotate: thick => `rotate(${thick ? 4 : 3}deg)`,\n    meteorLeft: 'unset'\n  },\n  rightToLeftIncreased: {\n    bar: 100,\n    toPercentage: n => 1 - n,\n    spinnerClass: 'anti-clockwise',\n    meteorRotate: thick => `rotate(${thick ? -4 : -3}deg)`,\n    meteorLeft: 0\n  },\n  rightToLeftReduced: {\n    bar: 0,\n    toPercentage: (n) => n,\n    spinnerClass: 'clockwise',\n    meteorRotate: thick => `rotate(${thick ? -4 : -3}deg)`,\n    meteorLeft: 0\n  }\n};\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { timer } from 'rxjs/observable/timer';\nimport { filter, map, distinctUntilChanged, skip, takeWhile, tap, switchMap } from 'rxjs/operators';\n\nimport { NgProgressState } from '../models/ng-progress.state';\n\n/**\n * Keep value within the range\n */\nconst clamp = (n, min, max) => {\n  if (n < min) {\n    return min;\n  }\n  if (n > max) {\n    return max;\n  }\n  return n;\n};\n\n@Injectable()\nexport class NgProgress {\n\n  /** Initial state */\n  initState: NgProgressState = {\n    active: false,\n    value: 0\n  };\n\n  /** Progress state */\n  state$ = new BehaviorSubject(this.initState);\n\n  /** Trickling stream */\n  trickling$ = new Subject();\n\n  progress = 0;\n  maximum = 1;\n  minimum = 0.08;\n  speed = 200;\n  trickleSpeed = 300;\n\n  /** Is progress started */\n  get isStarted(): boolean {\n    return this.progress > 0 && this.progress < this.maximum;\n  }\n\n  /** Progress start event */\n  get started(): Observable<boolean> {\n    return this.state$.pipe(\n      map((state: NgProgressState) => state.active),\n      distinctUntilChanged(),\n      filter(active => active)\n    );\n  }\n\n  /** Progress ended event */\n  get ended(): Observable<boolean> {\n    return this.state$.pipe(\n      map((state: NgProgressState) => state.active),\n      distinctUntilChanged(),\n      filter(active => !active),\n      skip(1)\n    );\n  }\n\n  constructor() {\n\n    this.trickling$.pipe(\n      switchMap(() => timer(0, this.trickleSpeed).pipe(\n        takeWhile(() => this.isStarted),\n        tap(() => this.inc()))\n      )\n    ).subscribe();\n  }\n\n  /** Start */\n  start() {\n    if (!this.isStarted) {\n      this.set(this.minimum);\n    }\n    this.trickling$.next();\n  }\n\n  /** Done */\n  done() {\n    /** if started, complete the progress */\n    if (this.isStarted) {\n      this.set(.3 + .5 * Math.random());\n      this.set(this.maximum);\n    }\n  }\n\n  /**\n   * Increment the progress\n   * @param {number} amount\n   */\n  inc(amount?: number) {\n    let n = this.progress;\n    /** if it hasn't start, start */\n    if (!this.isStarted) {\n      this.start();\n    } else {\n      if (typeof amount !== 'number') {\n        if (n >= 0 && n < 0.2) {\n          amount = 0.1;\n        } else if (n >= 0.2 && n < 0.5) {\n          amount = 0.04;\n        } else if (n >= 0.5 && n < 0.8) {\n          amount = 0.02;\n        } else if (n >= 0.8 && n < 0.99) {\n          amount = 0.005;\n        } else {\n          amount = 0;\n        }\n      }\n      n = clamp(n + amount, 0, 0.994);\n      this.set(n);\n    }\n  }\n\n  /**\n   * Set the progress\n   * @param {number} n - Progress value\n   */\n  set(n: number) {\n    this.progress = clamp(n, this.minimum, this.maximum);\n    this.updateState(this.progress, true);\n\n    /** if progress completed */\n    if (n === this.maximum) {\n      const hide = () => {\n        /**\n         *  reset the progress\n         *  Keep it { 0, false } to fadeOut progress-bar after complete\n         */\n        if (this.progress >= this.maximum) {\n          this.progress = 0;\n          this.updateState(this.progress, false);\n        }\n      };\n      const complete = () => {\n        /**\n         * complete the progress\n         * { 1, false } to complete progress-bar before hiding\n         */\n        if (this.progress >= this.maximum) {\n          this.updateState(this.progress, false);\n          setTimeout(hide, this.speed);\n        }\n      };\n      setTimeout(complete, this.speed);\n    }\n  }\n\n  /**\n   * Update progress state\n   * @param {number} progress - Progress value\n   * @param {boolean} isActive - Progress active\n   */\n  private updateState(progress: number, isActive: boolean) {\n    this.state$.next({\n      active: isActive,\n      value: progress\n    });\n  }\n}\n"
  ],
  "names": [
    "__decorate",
    "CommonModule",
    "NgProgressModule",
    "this",
    "NgProgress",
    "ChangeDetectionStrategy",
    "Component",
    "Input",
    "of$1",
    "switchMap",
    "Injectable",
    "map",
    "distinctUntilChanged",
    "filter",
    "skip",
    "timer$1",
    "takeWhile",
    "tap",
    "Subject$1",
    "BehaviorSubject$1"
  ],
  "mappings": "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"
}
